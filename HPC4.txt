1. ADDITION


#include<stdio.h>
#include<iostream>
#include<cstdlib>
#include<omp.h>
#include<stdlib.h>
using namespace std;
#define MAX 100
int main()
{
 int a[MAX],b[MAX],c[MAX],i;
 cout<<"\n First Vector:\t";
 //Instruct a master thread to fork and generate more threads to process following loop 
// structure
 #pragma omp parallel for
 for(i=0;i<MAX;i++)
 {
 a[i]=rand()%1000;
 }
 //Discuss issue of this for loop below-if we make it parallel, possibly values that get 
// printed will not be in sequence as we dont have any control on order of threads 
// execution
 for(i=0;i<MAX;i++)
 {
 cout<<"\t"<<a[i];
 }
 cout<<"\n Second Vector:\t";
 #pragma omp parallel for
 for(i=0;i<MAX;i++)
 {
 b[i]=rand()%1000;
 }
 for(i=0;i<MAX;i++)
 {
 cout<<"\t"<<b[i];
 }
 cout<<"\n Parallel-Vector Addition:(a,b,c)\t";
 #pragma omp parallel for
 for(i=0;i<MAX;i++)
 {
 c[i]=a[i]+b[i];
 }
 for(i=0;i<MAX;i++)
 {
 cout<<"\n\t\t"<<a[i],b[i],c[i];
 }
}


2. MULTI

#include<stdio.h>
#include<iostream>
#include<cstdlib>
#include<omp.h>
using namespace std;
int main()
{
 int m=3,n=2;
 int mat[m][n],vec[n],out[m];
 //matrix of size 3x2
 for(int row=0;row<m;row++)
 {
 for(int col=0;col<n;col++)
 {
mat[row][col]=1;
 }
 }
 //display matrix
 cout<<"Input Matrix"<<endl;
 for(int row=0;row<m;row++)
 {
 for(int col=0;col<n;col++)
 {
 cout<<"\t"<<mat[row][col];
 }
 cout<<""<<endl;
 }
 //column vector of size 2x1
 for(int row=0;row<n;row++)
 {
 vec[row]=2;
 }
 //display vector
 cout<<"Input Col-Vector"<<endl;
 for(int row=0;row<n;row++)
 {
 cout<<vec[row]<<endl;
 }
 //before multiplication check condition, no_of_cols(matrix)==no_of_rows(vector)
 #pragma omp parallel
 {
 #pragma omp parallel for
 for(int row=0;row<m;row++)
 {
 out[row]=0;
 for(int col=0;col<n;col++)
 {
 out[row]+=mat[row][col]*vec[col];
 }
 }
 } 
 //display resultant vector
 cout<<"Resultant Col-Vector"<<endl;
 for(int row=0;row<m;row++)
 {
 cout<<"\nvec["<<row<<"]:"<<out[row]<<endl;
 }
 return 0;
}
